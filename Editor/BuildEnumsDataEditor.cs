using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;

using Assets.Scripts.Attributes;
using Assets.Scripts.Data;
using UnityEditor;
using UnityEngine;

namespace Assets.Scripts.Editor
{
	[CustomPropertyDrawer(typeof(BuildEnumsTool))]
	public class BuildEnumsPropertyDrawer : PropertyDrawer
	{
		private const float _F_STD_PAD = 10;
		private const float _F_VERT_SPACING = 30;

		private const string _STR_REGEX_FORMAT = @"[^a-zA-Z0-9_]+";

		private float progress = 0;
		private float progressTarget = 0;

		public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
		{
			EditorUtility.ClearProgressBar();
			EditorGUILayout.BeginHorizontal();

			var buttonRect = new Rect(position.x, position.y + _F_STD_PAD, position.width, position.height + _F_STD_PAD);
			if (GUI.Button(buttonRect, new GUIContent("Rebuild Enumerations", "Use this to regenerate enum classes (click this if you made any changes to the game data tables)")))
			{
				this.BuildEnums(property.serializedObject.targetObject as GameData);
			}

			// EditorGUI.DrawRect(new Rect(position.x, position.y + 20, position.width, position.height + 20), Color.white);
			EditorGUILayout.EndHorizontal();

			EditorGUILayout.BeginHorizontal();
			EditorGUILayout.Space(_F_VERT_SPACING);
			EditorGUILayout.EndHorizontal();
		}

		public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
		{
			return EditorGUIUtility.standardVerticalSpacing + _F_STD_PAD;
		}

		private void BuildEnums(GameData data)
		{
			try
			{
				this.progress = 0;
				this.UpdateProgress("Reading volume...");

				var fieldsWithAttribute = data.GetType()
											  .GetFields()
											  .Where(f => f.GetCustomAttribute<GenerateEnumerationAttribute>() != null)
											  .ToList();

				this.progressTarget = this.CalculateDataVolume(data, fieldsWithAttribute);

				foreach (var field in fieldsWithAttribute)
				{
					var mi = this.GetType().GetMethod(nameof(this.UpdateEnumeration), BindingFlags.Instance | BindingFlags.NonPublic);
					var method = mi.MakeGenericMethod(field.FieldType.GetGenericArguments().First());
					method.Invoke(this, new object[] { data, field });
				}
			}
			catch (Exception ex)
			{
				Debug.LogError($"BuildEnumsDataEditor::BuildEnums - error occurred while attempting to generate enum files.  See exception for details.");
				Debug.LogException(ex);
			}

			EditorUtility.ClearProgressBar();
		}

		private float CalculateDataVolume(GameData data, List<FieldInfo> fields)
		{
			float result = 0;

			foreach (var field in fields)
			{
				var list = (IList)field.GetValue(data);
				result += list.Count;
			}

			return result;
		}

		private void UpdateEnumeration<T>(GameData data, FieldInfo info)
			where T : ScriptableObject
		{
			var attr = info.GetCustomAttribute<GenerateEnumerationAttribute>();


			string className = attr.ClassName;
			string filepath = string.Format(attr.PathFormat, $"{className}.cs");

			StringBuilder sb = new StringBuilder();
			sb.AppendLine("// AUTO GENERATED BY ENUMERATION TOOL - DO NOT EDIT MANUALLY");
			sb.AppendLine();
			sb.AppendLine("using System;");
			sb.AppendLine("");
			sb.AppendLine("namespace Assets.Scripts.Data");
			sb.AppendLine("{");
			sb.AppendLine("\t[Serializable]");
			sb.AppendLine($"\tpublic enum {className}");
			sb.AppendLine("\t{");

			var list = (List<T>)info.GetValue(data);

			foreach (var item in list)
			{
				string comma = list.IndexOf(item) != list.Count - 1 ? "," : string.Empty;
				string name = Regex.Replace(item.name, _STR_REGEX_FORMAT, string.Empty);
				sb.AppendLine($"\t\t{name}{comma}");
				this.progress++;
				this.UpdateProgress($"Reading {info.Name} table...");
			}

			sb.AppendLine("\t}");
			sb.AppendLine("}");

			File.WriteAllText(filepath, sb.ToString());
		}

		private void UpdateProgress(string text)
		{
			EditorUtility.DisplayProgressBar("Regnerate Enumerations", text, this.progress / this.progressTarget);
		}
	}
}